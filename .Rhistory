View(f)
f[100, 1]
f[100, 1] = gsub('1.000', '3000', f[100, 1])
f[100, 1]
f = read.delim("C:/Users/paolo/Downloads/M7B05.txt", header = F)
View(f)
f = read.delim("C:/Users/paolo/Downloads/M7B05.txt", header = F)
f[25, 1] = gsub('0.833', 'CHANGE', f[25, 1])
f[26, 1] = gsub('3.440', 'CHANGE', f[26, 1])
f[29, 1] = gsub('14.000', 'CHANGE', f[29, 1])
f[33, 1] = gsub('0.300', 'CHANGE', f[33, 1])
f[35, 1] = gsub('5.000', 'CHANGE', f[35, 1])
f[36, 1] = gsub('0.515', 'CHANGE', f[36, 1])
length(f)
length(f[,1])
f[40:length(f[,1]), 1]
f[40:length(f[,1]), 1] <- NULL
f[1:40]
f[1:40, 1]
f <- f[1:39, 1]
write.table(f, file = 'C:/Users/paolo/Downloads/input-to-CHANGE.txt',row.names = F, col.names=F,quote=F)
intervalli <- data.frame(
row = c(25, 26, 29, 33, 35, 36),
min = c(0.833, 0.74, 10, 0.1, 2.1, 0.305),
max = c(0.89, 6.9, 25, 0.4, 5, 1.829)
)
View(intervalli)
out <- read.delim("C:/Users/paolo/Downloads/M7B05.txt", header = F)
View(out)
input <- read.delim("C:/Users/paolo/Downloads/input-to-CHANGE.txt", header = F)
View(input)
intervalli['row']
for (r in intervalli['row']){
print(r)
}
randn()
runif(3, min=0, max=100)
for (i in intervalli){
print(i)
#val <-
#input[r, 1] <- gsub('CHANGE', round(val, 3), f[25, 1])
}
for (i in intervalli){
print(i[0])
#val <-
#input[r, 1] <- gsub('CHANGE', round(val, 3), f[25, 1])
}
for (i in intervalli){
print(i[0,0])
#val <-
#input[r, 1] <- gsub('CHANGE', round(val, 3), f[25, 1])
}
for (i in intervalli){
print(i[1])
#val <-
#input[r, 1] <- gsub('CHANGE', round(val, 3), f[25, 1])
}
for (i in intervalli){
print(i[1, 1])
#val <-
#input[r, 1] <- gsub('CHANGE', round(val, 3), f[25, 1])
}
i[1][1]
runif(min=0, max=100)
runif(1, min=0, max=100)
for (i in intervalli){
val <- runif(1, min = i[1][2], max = i[1][3])
input[i[1][1], 1] <- gsub('CHANGE', round(val, 3), f[i[1][1], 1])
}
i[1][2]
i[1]
i[2]
seq_len(intervalli)
seq_len(intervalli[,1])
intervalli[,1]
seq_len(length(intervalli[,1])
)
for(i in seq_len(length(intervalli[,1]))){
val <- runif(1, min = intervalli[i, 2], max = intervalli[i, 3])
input[intervalli[i, 1], 1] <- gsub('CHANGE', round(val, 3), f[intervalli[i, 1], 1])
}
intervalli[i, 1]
for(i in seq_len(length(intervalli[,1]))){
val <- runif(1, min = intervalli[i, 2], max = intervalli[i, 3])
input[intervalli[i, 1], 1] <- gsub('CHANGE', round(val, 3), input[intervalli[i, 1], 1])
}
View(input)
#Salvataggio del file generato
write.table(f, file = 'C:/Users/paolo/Downloads/input-changed.txt',row.names = F, col.names=F,quote=F)
#Salvataggio del file generato
write.table(input, file = 'C:/Users/paolo/Downloads/input-changed.txt',row.names = F, col.names=F,quote=F)
#Salvataggio del file generato
write.table(input, file = 'C:/Users/paolo/Downloads/input-changed.txt',row.names = F, col.names=F,quote=T)
#Salvataggio del file generato
write.table(input, file = 'C:/Users/paolo/Downloads/input-changed.txt', row.names = F, col.names=F, quote=F)
N <- 10 #numero di file di input da creare
for(i in seq_len(N)){
#Carica il file di base da cambiare
input <- read.delim("C:/Users/paolo/Downloads/input-to-CHANGE.txt", header = F)
#Creazione dataframe contenente riga ed estremi di variabilità
intervalli <- data.frame(
row = c(25, 26, 29, 33, 35, 36),
min = c(0.833, 0.74, 10, 0.1, 2.1, 0.305),
max = c(0.89, 6.9, 25, 0.4, 5, 1.829)
)
#Sostituzione di "CHANGE" con valori casuali nell'intervallo di variabilità
for(i in seq_len(length(intervalli[,1]))){
val <- runif(1, min = intervalli[i, 2], max = intervalli[i, 3])
input[intervalli[i, 1], 1] <- gsub('CHANGE', round(val, 3), input[intervalli[i, 1], 1])
}
#Salvataggio del file generato
write.table(input, file = paste('C:/Users/paolo/Downloads/input-changed-', i, '.txt'), row.names = F, col.names=F, quote=F)
}
seq_len(N)
for(i in seq_len(N)){
print(i)
# #Carica il file di base da cambiare
# input <- read.delim("C:/Users/paolo/Downloads/input-to-CHANGE.txt", header = F)
#
# #Creazione dataframe contenente riga ed estremi di variabilità
# intervalli <- data.frame(
#   row = c(25, 26, 29, 33, 35, 36),
#   min = c(0.833, 0.74, 10, 0.1, 2.1, 0.305),
#   max = c(0.89, 6.9, 25, 0.4, 5, 1.829)
# )
#
# #Sostituzione di "CHANGE" con valori casuali nell'intervallo di variabilità
# for(i in seq_len(length(intervalli[,1]))){
#   val <- runif(1, min = intervalli[i, 2], max = intervalli[i, 3])
#   input[intervalli[i, 1], 1] <- gsub('CHANGE', round(val, 3), input[intervalli[i, 1], 1])
# }
#
# #Salvataggio del file generato
# write.table(input, file = paste('C:/Users/paolo/Downloads/input-changed-', i, '.txt'), row.names = F, col.names=F, quote=F)
}
N <- 10 #numero di file di input da creare
for(i in seq_len(N)){
print(i)
#Carica il file di base da cambiare
input <- read.delim("C:/Users/paolo/Downloads/input-to-CHANGE.txt", header = F)
#Creazione dataframe contenente riga ed estremi di variabilità
intervalli <- data.frame(
row = c(25, 26, 29, 33, 35, 36),
min = c(0.833, 0.74, 10, 0.1, 2.1, 0.305),
max = c(0.89, 6.9, 25, 0.4, 5, 1.829)
)
#Sostituzione di "CHANGE" con valori casuali nell'intervallo di variabilità
for(i in seq_len(length(intervalli[,1]))){
val <- runif(1, min = intervalli[i, 2], max = intervalli[i, 3])
input[intervalli[i, 1], 1] <- gsub('CHANGE', round(val, 3), input[intervalli[i, 1], 1])
}
#Salvataggio del file generato
write.table(input, file = paste('C:/Users/paolo/Downloads/input-changed-', i, '.txt'), row.names = F, col.names=F, quote=F)
}
N <- 10 #numero di file di input da creare
for(i in seq_len(N)){
print(i)
#Carica il file di base da cambiare
input <- read.delim("C:/Users/paolo/Downloads/input-to-CHANGE.txt", header = F)
#Creazione dataframe contenente riga ed estremi di variabilità
intervalli <- data.frame(
row = c(25, 26, 29, 33, 35, 36),
min = c(0.833, 0.74, 10, 0.1, 2.1, 0.305),
max = c(0.89, 6.9, 25, 0.4, 5, 1.829)
)
#Sostituzione di "CHANGE" con valori casuali nell'intervallo di variabilità
for(i in seq_len(length(intervalli[,1]))){
val <- runif(1, min = intervalli[i, 2], max = intervalli[i, 3])
input[intervalli[i, 1], 1] <- gsub('CHANGE', round(val, 3), input[intervalli[i, 1], 1])
}
#Salvataggio del file generato
write.table(input, file = paste0('C:/Users/paolo/Downloads/input-changed-', i, '.txt'), row.names = F, col.names=F, quote=F)
print(paste0('C:/Users/paolo/Downloads/input-changed-', i, '.txt'))
}
N <- 10 #numero di file di input da creare
for(n in seq_len(N)){
print(i)
#Carica il file di base da cambiare
input <- read.delim("C:/Users/paolo/Downloads/input-to-CHANGE.txt", header = F)
#Creazione dataframe contenente riga ed estremi di variabilità
intervalli <- data.frame(
row = c(25, 26, 29, 33, 35, 36),
min = c(0.833, 0.74, 10, 0.1, 2.1, 0.305),
max = c(0.89, 6.9, 25, 0.4, 5, 1.829)
)
#Sostituzione di "CHANGE" con valori casuali nell'intervallo di variabilità
for(i in seq_len(length(intervalli[,1]))){
val <- runif(1, min = intervalli[i, 2], max = intervalli[i, 3])
input[intervalli[i, 1], 1] <- gsub('CHANGE', round(val, 3), input[intervalli[i, 1], 1])
}
#Salvataggio del file generato
write.table(input, file = paste0('C:/Users/paolo/Downloads/input-changed-', n, '.txt'), row.names = F, col.names=F, quote=F)
print(paste0('C:/Users/paolo/Downloads/input-changed-', n, '.txt'))
}
out <- read.delim("C:/Users/paolo/Downloads/M7B05.txt", header = F)
out <- read.delim("C:/Users/paolo/Downloads/M7B05.txt", header = F)
out[177, 1]
strsplit(out[177, 1], split = ' ')
test = strsplit(out[177, 1], split = ' ')
test == ''
for( i in 1:length(test)){
test[i] == ''
}
for( i in 1:length(test)){
print(test[i] == '')
}
for(i in 1:length(test)){
print(test[1][i] == '')
}
View(test)
View(test)
test[[1]]
for(i in 1:length(test)){
print(test[[1]][i] == '')
}
print(test[[1]][i] == '')
for(g in 1:length(test)){
print(test[[1]][i] == '')
}
for(g in 1:length(test[[1]])){
print(test[[1]][i] == '')
}
l = list()
l = list()
for(i in 1:length(test[[1]])){
l = l+ test[[1]][i] == ''
}
for(i in 1:length(test[[1]])){
l = l + [test[[1]][i] == '']
}
for(i in 1:length(test[[1]])){
l.append(test[[1]][i] == '')
}
for(i in 1:length(test[[1]])){
append(l, test[[1]][i] == '')
}
View(l)
l = list()
for(i in 1:length(test[[1]])){
append(l, test[[1]][i] == '')
}
test[[1]] != ''
test[[1]][test[[1]] != '']
test[[1]][test[[1]] != ''][2]
rn = strsplit(out[189, 1], split = ' ')
print(rn[[1]][rn[[1]] != ''][2])
print(as.double(rn[[1]][rn[[1]] != ''][2]))
st <- 'M7B03 (1)out.txt'
strsplit(st, split = '(')
strsplit(st, split = "(")
st <- gsub('(', '')
st <- gsub('(', '', st)
st <- gsub('()', '', st)
st <- gsub('()', '', st)
st <- gsub('(1)', '1', st)
st <- gsub('(1)', '1', st)
st <- 'M7B03 (1)out.txt'
st <- gsub('(1)', '1', st)
st <- gsub("(1)", "1", st)
st <- "M7B03 (1)out.txt"
st <- gsub("(1)", "1", st)
st <- gsub("\\s*\\([^\\)]+\\)","", st)
st <- "M7B03 (1)out.txt"
st <- gsub("\\s*\\(+\\)","", st)
strsplit(st, split = " \\(.*\\)"))
st <- "M7B03 (1)out.txt"
strsplit(st, split = " \\(.*\\)"))
strsplit(st, split = " \\(.*\\)")
strsplit(st, split = " \\(\\)")
strsplit(st, split = " \\(")
strsplit(st, split = " \\)")
st <- "M7B03 (1)out.txt"
st <- strsplit(st, split = " \\(")
strsplit(st, split = " \\)")
strsplit(st[[1]][2], split = " \\)")
st <- strsplit(st, split = "\\(")
strsplit(st[[1]][2], split = "\\)")
st <- "M7B03 (1)out.txt"
st <- strsplit(st, split = "\\(")
strsplit(st[[1]][2], split = "\\)")
st[[1]][1]
gsub(" ", "", st[[1]][1])
setwd("C:/DRN-analysis")
source("./R/Libraries/Libraries.R")
source("./R/Libraries/Libraries_plot.R")
source("./R/Libraries/Functions.R")
source("./R/Libraries/Functions_MC.R")
## New functions -----
create_SPI_df <- function(dates, SPI_list, start, end, labels = NULL, relabel = FALSE){
idx <- dates %in% create_date_vector(start, end)
df <- as.data.frame(array(dim = c(sum(idx), length(SPI_list)+1)))
names(df) <- c("Date", names(SPI_list))
df$Date <- dates[idx]
for (res in colnames(df)[2:length(colnames(df))]){
for (i in seq_len(nrow(df))){
d <- as.Date(df[i,"Date"], "%d-%m-%Y")
df[i, res] <- SPI_list[[res]][["fitted"]][dates %in% d]
}
}
mean <- data.frame(df$Date, rowMeans(df[2:ncol(df)]))
names(mean) <- c("Date", "value")
if(relabel){
cols = c("Date")
for (c in colnames(df)[2:ncol(df)]){
cols <- append(cols, labels[[c]])
}
names(df) <- cols
}
df <- reshape2::melt(df, id = "Date")
# if (relabel){
#   levels(df$variable) <- sort(levels(df$variable))
# }
return(list(df, mean))
}
plot_violin_sub <- function(df, breaks, limits){
p <- ggplot(data = df, aes(x = variable, y = value)) +
# geom_violin(color = "#293462", fill = "#293462") +
geom_violin(color = "#F24C4C", fill = "#F24C4C", alpha = 0.5) +
theme(legend.position = "none",
axis.text.x = element_text(size = 26, face = "bold"),
axis.text.y = element_text(size = 28),
axis.title.y = element_text(size = 26, face = "bold"),
axis.title.x = element_blank(),
panel.background = element_rect(fill = "white", colour = "grey50"),
panel.grid.major.x = element_line(color = "grey",
size = 0.5,
linetype = 2)
) +
# Add the drought indicator lines
geom_hline(yintercept = 0, color = 'lightblue', linetype = "dashed", size = 1.25, alpha = 0.8) +
geom_hline(yintercept = -1, color = 'yellow', linetype = "dashed", size = 1.25, alpha = 0.8) +
geom_hline(yintercept = -1.5, color = 'orange', linetype = "dashed", size = 1.25, alpha = 0.8) +
geom_hline(yintercept = -2, color = 'red', linetype = "dashed", size = 1.25, alpha = 0.8) +
# Modify the axis
scale_y_continuous(name = 'SPI-12', limits = c(min(df$value), max(df$value)), breaks = seq(-4, 4, 1))
return(p)
}
SPI_list <- list.load("./Data/Analysis/DCA/SPI_list.RData")
DCA_AR <- list.load("./Data/Analysis/DCA/DCA_AR.RData")
labels <- list("152" = "A",
"154" = "B",
"159" = "C",
"158" = "D",
"150" = "E",
"155" = "F",
"145" = "G",
"144" = "H",
"146" = "I",
"149" = "J",
"153" = "K",
"151" = "L",
"160" = "M",
"157" = "N",
"142" = "O",
"147" = "P",
"148" = "Q",
"143" = "R",
"156" = "S",
"127" = "T",
"123" = "U",
"137" = "V",
"126" = "W",
"134" = "X",
"139" = "Y",
"125" = "Z",
"138" = "ZA"
)
## Create dataframes ---------
df92 <- create_SPI_df(DCA_AR[["123"]]$date, SPI_list, 1992, 1993, labels, TRUE)
df18 <- create_SPI_df(DCA_AR[["123"]]$date, SPI_list, 2012, 2018, labels, TRUE)
p <- plot_violin_sub(df92[[1]])
p
View(df92)
create_SPI_df <- function(dates, SPI_list, start, end, labels = NULL, relabel = FALSE){
idx <- dates %in% create_date_vector(start, end)
df <- as.data.frame(array(dim = c(sum(idx), length(SPI_list)+1)))
names(df) <- c("Date", names(SPI_list))
df$Date <- dates[idx]
for (res in colnames(df)[2:length(colnames(df))]){
for (i in seq_len(nrow(df))){
d <- as.Date(df[i,"Date"], "%d-%m-%Y")
df[i, res] <- SPI_list[[res]][["fitted"]][dates %in% d]
}
}
mean <- data.frame(df$Date, rowMeans(df[2:ncol(df)]))
names(mean) <- c("Date", "value")
if(relabel){
cols = c("Date")
for (c in colnames(df)[2:ncol(df)]){
cols <- append(cols, labels[[c]])
}
names(df) <- cols
new_order = sort(colnames(df))
df <- df[, new_order]
}
df <- reshape2::melt(df, id = "Date")
# if (relabel){
#   levels(df$variable) <- sort(levels(df$variable))
# }
return(list(df, mean))
}
p <- plot_violin_sub(df92[[1]])
p
df92 <- create_SPI_df(DCA_AR[["123"]]$date, SPI_list, 1992, 1993, labels, TRUE)
p <- plot_violin_sub(df92[[1]])
p
create_SPI_df <- function(dates, SPI_list, start, end, labels = NULL, relabel = FALSE){
idx <- dates %in% create_date_vector(start, end)
df <- as.data.frame(array(dim = c(sum(idx), length(SPI_list)+1)))
names(df) <- c("Date", names(SPI_list))
df$Date <- dates[idx]
for (res in colnames(df)[2:length(colnames(df))]){
for (i in seq_len(nrow(df))){
d <- as.Date(df[i,"Date"], "%d-%m-%Y")
df[i, res] <- SPI_list[[res]][["fitted"]][dates %in% d]
}
}
mean <- data.frame(df$Date, rowMeans(df[2:ncol(df)]))
names(mean) <- c("Date", "value")
if(relabel){
cols <- c("Date")
for (c in colnames(df)[2:ncol(df)]){
cols <- append(cols, labels[[c]])
}
names(df) <- cols
new_order <- sort(colnames(df))
df <- df[, new_order]
}
df <- reshape2::melt(df, id = "Date")
return(list(df, mean))
}
plot_box_sub <- function(df, breaks, limits){
p <- ggplot(data = df, aes(x = variable, y = value, group = variable)) +
geom_boxplot(fill = "#F24C4C", color = "#293462") +
theme(legend.position = "none",
axis.text.x = element_text(size = 22),
axis.text.y = element_text(size = 22),
axis.title.y = element_text(size = 24, face = "bold"),
axis.title.x = element_blank(),
panel.background = element_rect(fill = "white", colour = "grey50")
) +
#Add the drought indicator lines
geom_hline(yintercept = 0, color = 'lightblue', linetype = "dashed", size = 1.25, alpha = 0.8) +
geom_hline(yintercept = -1, color = 'yellow', linetype = "dashed", size = 1.25, alpha = 0.8) +
geom_hline(yintercept = -1.5, color = 'orange', linetype = "dashed", size = 1.25, alpha = 0.8) +
geom_hline(yintercept = -2, color = 'red', linetype = "dashed", size = 1.25, alpha = 0.8) +
#Modify the axis
scale_y_continuous(name = 'SPI-12', limits = c(min(df$value), max(df$value)), breaks = seq(-4, 4, 1))
return(p)
}
plot_violin_sub <- function(df, breaks, limits){
p <- ggplot(data = df, aes(x = variable, y = value)) +
# geom_violin(color = "#293462", fill = "#293462") +
geom_violin(color = "#F24C4C", fill = "#F24C4C", alpha = 0.5) +
theme(legend.position = "none",
axis.text.x = element_text(size = 26, face = "bold"),
axis.text.y = element_text(size = 28),
axis.title.y = element_text(size = 26, face = "bold"),
axis.title.x = element_blank(),
panel.background = element_rect(fill = "white", colour = "grey50"),
panel.grid.major.x = element_line(color = "grey",
size = 0.5,
linetype = 2)
) +
# Add the drought indicator lines
geom_hline(yintercept = 0, color = 'lightblue', linetype = "dashed", size = 1.25, alpha = 0.8) +
geom_hline(yintercept = -1, color = 'yellow', linetype = "dashed", size = 1.25, alpha = 0.8) +
geom_hline(yintercept = -1.5, color = 'orange', linetype = "dashed", size = 1.25, alpha = 0.8) +
geom_hline(yintercept = -2, color = 'red', linetype = "dashed", size = 1.25, alpha = 0.8) +
# Modify the axis
scale_y_continuous(name = 'SPI-12', limits = c(min(df$value), max(df$value)), breaks = seq(-4, 4, 1))
return(p)
}
## Load data -------
sub <- readOGR("./Data/Shapefile/subbasins_cut_geomfix.shp")
SPI_list <- list.load("./Data/Analysis/DCA/SPI_list.RData")
DCA_AR <- list.load("./Data/Analysis/DCA/DCA_AR.RData")
labels <- list("152" = "A",
"154" = "B",
"159" = "C",
"158" = "D",
"150" = "E",
"155" = "F",
"145" = "G",
"144" = "H",
"146" = "I",
"149" = "J",
"153" = "K",
"151" = "L",
"160" = "M",
"157" = "N",
"142" = "O",
"147" = "P",
"148" = "Q",
"143" = "R",
"156" = "S",
"127" = "T",
"123" = "U",
"137" = "V",
"126" = "W",
"134" = "X",
"139" = "Y",
"125" = "Z",
"138" = "ZA"
)
## Create dataframes ---------
df92 <- create_SPI_df(DCA_AR[["123"]]$date, SPI_list, 1992, 1993, labels, TRUE)
df18 <- create_SPI_df(DCA_AR[["123"]]$date, SPI_list, 2012, 2018, labels, TRUE)
p <- plot_violin_sub(df92[[1]])
plot.save(p, width = 1920, height = 1080, filename = "./Figures and tables/paper/fix_figure4/1992_violin_subs_pink.png")
p <- plot_violin_sub(df18[[1]])
plot.save(p, width = 1920, height = 1080, filename = "./Figures and tables/paper/fix_figure4/2012_violin_subs_pink.png")
