mpg %>%
filter(cty<25) %>%
ggplot(aes(displ,cty))+
geom_point(aes(colour = drv, size = trans),alpha = 0.5)+
geom_smooth()+
facet_wrap(~year, nrow = 1)
mpg %>%
filter(cty<25) %>%
ggplot(aes(displ,cty))+
geom_point(aes(colour = drv, size = trans),alpha = 0.5)+
geom_smooth()+
facet_wrap(~year, nrow = 1)+
labs(x = "Engine size", y = "MPG in the city", title = "Fuel efficiency")+
theme_minimal()
mpg %>%
filter(cty<25) %>%
ggplot(aes(displ,cty))+
geom_point(aes(colour = drv, size = trans),alpha = 0.5)+
geom_smooth(method = lm)+
facet_wrap(~year, nrow = 1)+
labs(x = "Engine size", y = "MPG in the city", title = "Fuel efficiency")+
theme_minimal()
names(mpg)
mpg %>%
ggplot(aes(displ,cty))+
geom_line(colour = "red")
mpg %>%
ggplot(aes(displ,cty))+
geom_line(colour = "red")+
geom_lne(aes(fl,cty))
mpg %>%
ggplot(aes(displ,cty))+
geom_line(colour = "red")+
geom_line(aes(fl,cty))
View(mpg)
mpg %>%
ggplot(aes(displ,cty))+
geom_line(colour = "red")+
geom_line(aes(displ,hwy))
install.packages("devtools")
library(devtools)
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS=TRUE) #tell git_install() to ignore warnings. Otherwise, it gets stuck at each warning
install_github("tPilz/lumpR")
library(lumpR)
library(lumpR)
warnings()
?lumpR
?db_wasa_input
?make_wasa_input
path<-"C:/Users/Utente/OneDrive - Politecnico di Milano/Backup PC/Uni/Thesis/Analysis/time_series_generation"
Bana_prec_RMSE<-read.table(paste0(path,"/RMSE_prec.txt"), header = TRUE, sep = "\t")
View(Bana_prec_RMSE)
path<-"C:/Users/Utente/OneDrive - Politecnico di Milano/Backup PC/Uni/Thesis/Analysis/time_series_generation"
Bana_temp_RMSE<-read.table(paste0(path,"/RMSE_temp.txt"), header = TRUE, sep = "\t")
View(Bana_prec_RMSE)
View(Bana_temp_RMSE)
#Class ripartition
path<-"C:/Users/Utente/OneDrive - Politecnico di Milano/Backup PC/Uni/Thesis/Analysis/gen_files"
count_class<-read.table(paste0(path, "/lake_number_newHDRN_met2.dat"), skip = 2)
View(count_class)
for(i in 2:6){
print(paste0("Percentage of resevoirs in Class ",i-1))
print(paste0(round(sum(count_class[,i])/sum(count_class[,2:6]),digits = 3)*100," %"))
}
setwd("C:/Users/Utente/OneDrive - Politecnico di Milano/Backup PC/Uni/Thesis/Directory_thesis_codes")
source("./Libraries/Libraries.R")
DCA_real <- list.load("./Data/DCA/DCA_real.RData")
DCA_noH <- list.load("./Data/DCA/DCA_noH.RData")
DCA_obs <- list.load("./Data/DCA/DCA_obs.RData")
SPI_df <- data.frame(date = DCA_real$Banabuiu$date)
for(i in 1:length(DCA_real)){
SPI_df$new <- DCA_real[[i]]$PI
names(SPI_df)[names(SPI_df) == "new"] <- names(DCA_real)[i]
}
df <- reshape2::melt(SPI_df, id.vars = 'date', variable.name = 'Subbasins')
p <-  ggplot(df, aes(date, value)) +
geom_line(aes(colour = Subbasins), alpha = 0.5, size = 1) +
xlab('Date') + ylab('SPI-12')
plot(p)
p <-  ggplot(df)
p <-  ggplot(df)
plot(p)
p <-  ggplot(df)+
geom_line(aes(x = df$date, y = df$value, alpha = df$Subbasins))
plot(p)
p <-  ggplot(df)+
geom_line(aes(x = df$date, y = df$value, color = df$Subbasins))
plot(p)
View(df)
p <-  ggplot(df)+
geom_line(aes(x = date, y = value, color = 'grey')) +
geom_line(aes(x = date, y = value[Subbasins == 'Banabuiu'], color = 'red'))
plot(p)
p <-  ggplot(df)+
geom_line(aes(x = date, y = value, color = 'grey')) +
geom_line(aes(x = date[Subbasins == 'Banabuiu'], y = value[Subbasins == 'Banabuiu'], color = 'red'))
plot(p)
df$color <- rep(0, nrow(df))
df$color[df$Subbasins == Banabuiu] <- 1
df$color[df$Subbasins == 'Banabuiu'] <- 1
p <-  ggplot(df)+
geom_line(aes(x = date, y = value, color = color))
plot(p)
p <-  ggplot(df, aes(date, value)) +
geom_line(aes(colour = color), alpha = 0.5, size = 1)
plot(p)
p <-  ggplot(df, aes(date, value)) +
geom_line(aes(colour = Subbasins), alpha = 0.5, size = 1) +
xlab('Date') + ylab('SPI-12')
plot(p)
p <-  ggplot(df, aes(date, value)) +
geom_line(aes(colour = color), alpha = 0.5, size = 1)+
xlab('Date') + ylab('SPI-12')
plot(p)
df <- reshape2::melt(SPI_df, id.vars = 'date', variable.name = 'Subbasins')
df$color <- rep(0, nrow(df))
df$color[df$Subbasins == 'Banabuiu'] <- 1
p <-  ggplot(df, aes(date, value)) +
geom_line(aes(colour = color), alpha = 0.5, size = 1)+
xlab('Date') + ylab('SPI-12')
plot(p)
pdf("./Data/Plot_table/spi_v1.pdf")
p <-  ggplot(df, aes(date, value)) +
geom_line(aes(colour = Subbasins), alpha = 0.5, size = 1) +
xlab('Date') + ylab('SPI-12')
print(p)
dev.off()
#Salvalo cosÃ¬ e passa a downstr
ggsave(
filename = "./Data/Plot_table/spi_v1.png",
plot = p,
width = 10,
height = 8,
units = 'cm'
)
ggsave(
filename = "./Data/Plot_table/spi_v1.png",
plot = p,
width = 20,
height = 8,
units = 'cm'
)
ggsave(
filename = "./Data/Plot_table/spi_v1.1.png",
plot = p,
width = 20,
height = 8,
units = 'cm'
)
plot(p)
View(DCA_real)
DCA_real[['Banabuiu']]
warning(())
warning()
df <- (date = DCA_real[['Banabuiu']]$date, Real = DCA_real[['Banabuiu']]$WSI, noHDNR = DCA_noH[['Banabuiu']]$WSI)
df <- (date = DCA_real[['Banabuiu']]$date, Real = DCA_real[['Banabuiu']]$WSI, noHDNR = DCA_noH[['Banabuiu']]$WSI)
df <- data.frame(date = DCA_real[['Banabuiu']]$date, Real = DCA_real[['Banabuiu']]$WSI, noHDNR = DCA_noH[['Banabuiu']]$WSI)
View(df)
df <- reshape2::melt(SPI_df, id.vars = 'date', variable.name = 'Scenario')
df <- reshape2::melt(df, id.vars = 'date', variable.name = 'Scenario')
View(df)
df <- data.frame(date = DCA_real[['Banabuiu']]$date, Real = DCA_real[['Banabuiu']]$WSI, noHDNR = DCA_noH[['Banabuiu']]$WSI)
df <- reshape2::melt(df, id.vars = 'date', variable.name = 'Scenario')
View(df)
p <- ggplot(df, aes(date, value)) +
geom_line(aes(colour = Scenario), size = 2) +
xlab('Date') + ylab('VD')
plot(p)
p <- ggplot(df, aes(date, value)) +
geom_line(aes(colour = Scenario), size = 1, alpha = 0.5) +
xlab('Date') + ylab('VD')
plot(p)
p <- ggplot(df, aes(date, value)) +
geom_line(aes(colour = Scenario), size = 1.5, alpha = 0.5) +
xlab('Date') + ylab('VD')
plot(p)
load("./Data/Downstreamness/Dsc_r.Rdata")
load("./Data/Downstreamness/Dsc_nH.Rdata")
5+1
setwd("C:/Users/Utente/OneDrive - Politecnico di Milano/Backup PC/Uni/Thesis/Directory_thesis_codes")
source("./Libraries/Libraries.R")
load("./Data/Downstreamness/Dsc_r.Rdata")
load("./Data/Downstreamness/Dsc_nH.Rdata")
View(Dsc_nH)
df <- data.frame(date = Dsc_r$date, Real = Dsc_r$Dsc, noHDNR = Dsc_nH$Dsc)
df <- reshape2::melt(df, id.vars = 'date', variable.name = 'Scenario')
View(df)
p <- df %>%
ggplot(aes(date, value)) +
geom_line(aes(colour = Scenario), size = 1.5, alpha = 0.5) +
xlab('Date') + ylab('Dsc')
plot(p)
p + scale_x_discrete(name = "Date", limits = seq(1980, 2020, 5))
p + scale_x_continuous(name = "Date", limits = c(1980, 2020))
plot(p)
p + scale_x_continuous(name = "Date", limits = seq(1980, 2020, 5))
plot(p)
p + scale_x_continuous(name = "Date", breaks = seq(1980, 2020, 5))
p + scale_x_continuous(name = "Date", breaks = seq(1980, 2018, 2))
plot(p)
p <- df %>%
ggplot(aes(date, value)) +
geom_line(aes(colour = Scenario), size = 1.5, alpha = 0.5) +
xlab('Date') + ylab('Dsc')
p + scale_x_continuous(name = "Date", breaks = seq(1980, 2018, 2))
plot(p)
p + scale_x_continuous(name = "Date", breaks = seq(1980, 2018, 2))
min(Dsc_r$Dsc)
max(Dsc_nH$Dsc)
p + scale_x_continuous(name = "Date", breaks = seq(1980, 2018, 2)) +
scale_y_continuous(name = expression('D'['SC']), limits = c(40, 55), breaks = rep(40, 55, 5))
p + scale_x_continuous(name = "Date", breaks = seq(1980, 2018, 2)) +
scale_y_continuous(name = expression('D'['SC']), limits = c(40, 55),
breaks = seq(40, 55, 5))
p + scale_x_continuous(name = "Date", breaks = seq(1980, 2018, 2)) +
scale_y_continuous(name = expression('D'['SC']), limits = c(40, 55),
breaks = seq(40, 55, 2.5))
p <- df %>%
ggplot(aes(date, value)) +
geom_line(aes(linetype = Scenario), size = 1.5, alpha = 0.5) +
xlab('Date') + ylab('Dsc')
p + scale_x_continuous(name = "Date", breaks = seq(1980, 2018, 2)) +
scale_y_continuous(name = expression('D'['SC']), limits = c(40, 55),
breaks = seq(40, 55, 2.5))
DCA_real <- list.load("./Data/DCA/DCA_real.RData")
DCA_noH <- list.load("./Data/DCA/DCA_noH.RData")
DCA_obs <- list.load("./Data/DCA/DCA_obs.RData")
df <- data.frame(date = DCA_real[['Banabuiu']]$date, Real = DCA_real[['Banabuiu']]$WSI, noHDNR = DCA_noH[['Banabuiu']]$WSI)
df <- reshape2::melt(df, id.vars = 'date', variable.name = 'Scenario')
p <- ggplot(df, aes(date, value)) +
geom_line(aes(linetype = Scenario), size = 1.5, alpha = 0.5) +
xlab('Date') + ylab('VD')
plot(p)
p <- ggplot(df, aes(date, value)) +
geom_line(aes(linetype = Scenario), alpha = 0.5) +
xlab('Date') + ylab('VD')
plot(p)
p <- ggplot(df, aes(date, value)) +
geom_line(aes(linetype = Scenario), alpha = 0.5) +
xlab('Date') + ylab('VD') +
scale_y_continuous(name = 'Volume Deficit (VD)', limits = c(-1, 1))
plot(p)
p <- ggplot(df, aes(date, value)) +
geom_line(aes(linetype = Scenario), alpha = 0.5) +
xlab('Date') + ylab('VD') +
scale_y_continuous(name = 'Volume Deficit (VD)', limits = c(-1, 1)) +
scale_x_continuous(name = 'Date', breaks = seq(1980, 2018, 2))
plot(p)
p <- ggplot(df, aes(date, value)) +
geom_line(aes(linetype = Scenario), alpha = 0.5) +
xlab('Date') + ylab('VD') +
scale_y_continuous(name = 'Volume Deficit (VD)', limits = c(-1, 1)) +
scale_x_date(name = 'Date', date_breaks = "2 years")
plot(p)
p <- ggplot(df, aes(date, value)) +
geom_line(aes(linetype = Scenario), alpha = 0.5) +
xlab('Date') + ylab('VD') +
scale_y_continuous(name = 'Volume Deficit (VD)', limits = c(-1, 1)) +
scale_x_date(name = 'Date', date_breaks = "2 years", date_labels = '%Y')
plot(p)
p <- ggplot(df, aes(date, value)) +
geom_line(aes(linetype = Scenario), alpha = 0.5, size = 1.25) +
xlab('Date') + ylab('VD') +
scale_y_continuous(name = 'Volume Deficit (VD)', limits = c(-1, 1)) +
scale_x_date(name = 'Date', date_breaks = "2 years", date_labels = '%Y')
plot(p)
load("./Data/Downstreamness/Dsv_r.Rdata")
load("./Data/Downstreamness/Dsv_nH.Rdata")
View(Dsv_nH)
df <- data.frame(date = Dsv_r$date, Real = Dsv_r$Dsv, noHDNR = Dsv_nH$Dsv)
df <- reshape2::melt(df, id.vars = 'date', variable.name = 'Scenario')
p <- df %>%
ggplot(aes(date, value)) +
geom_line(aes(linetype = Scenario), size = 1.5, alpha = 0.5) +
scale_x_continuous(name = "Date", breaks = seq(1980, 2018, 2)) +
scale_y_continuous(name = expression('D'['SC']), limits = c(40, 55),
breaks = seq(40, 55, 2.5))
plot(p)
p <- df %>%
ggplot(aes(date, value)) +
geom_line(aes(linetype = Scenario), size = 1.5, alpha = 0.5) +
scale_x_continuous(name = "Date", breaks = seq(1980, 2018, 2))
plot(p)
p <- df %>%
ggplot(aes(date, value)) +
geom_line(aes(linetype = Scenario), size = 1.5, alpha = 0.5) +
scale_y_continuous(name = expression('D'['SV']), limits = c(25, 65)) +
scale_x_date(name = 'Date', date_breaks = "2 years", date_labels = '%Y')
plot(p)
CO2 %>%
ggplot(aes(Treatment,uptake))+
geom_boxplot()+
geom_point(alpha = 0.5, aes(size = conc, colour = Plant))+
facet_wrap(~Type)+
coord_flip()+
theme_bw()+
labs(title = "Chilled vs Non-Chilled")
CO2 %>%
ggplot(aes(Treatment,uptake))+
geom_boxplot()+
geom_point(alpha = 0.5, aes(size = conc, colour = Plant))+
facet_wrap(~Type)+
coord_flip()+
theme_bw()+
labs(title = "Chilled vs Non-Chilled")
?CO2
CO2
HDNR <- readOGR("./Data/HDNR/HDNR.shp")
res <- readOGR("./Data/Reservoirs/centralized_res.shp")
#Create dfs from the shapefiles attribute tables
HDNR_df <- HDNR@data
res_df <- res@data
#Remove the shapefiles (not needed anymore)
remove(HDNR)
remove(res)
source("./Libraries/Functions.R")
source("./Libraries/Functions_MC.R")
load("./Data/Scenarios/Real/real_volumes.RData")
#NoH scenario
load("./Data/Scenarios/No_HDNR/nohdnr_volumes.RData")
#HDNR
#Real scenario
load("./Data/Scenarios/Real/class1.RData")
load("./Data/Scenarios/Real/class2.RData")
load("./Data/Scenarios/Real/class3.RData")
load("./Data/Scenarios/Real/class4.RData")
load("./Data/Scenarios/Real/class5.RData")
HDNR_vol <- data.frame(matrix(NA, nrow(class1), nrow(HDNR_df)))
names(HDNR_vol) <- HDNR_df$id
HDNR_vol$date <- class1$date
col_order <- c("date", HDNR_df$id)
HDNR_vol <- HDNR_vol[, col_order]
HDNR_vol <- get_mean_volume(HDNR_df, class1, HDNR_vol, 1)
HDNR_vol <- get_mean_volume(HDNR_df, class2, HDNR_vol, 2)
HDNR_vol <- get_mean_volume(HDNR_df, class3, HDNR_vol, 3)
HDNR_vol <- get_mean_volume(HDNR_df, class4, HDNR_vol, 4)
HDNR_vol <- get_mean_volume(HDNR_df, class5, HDNR_vol, 5)
get_mean_volume = function(df, df_class, df_vol, c){
get_mean_volume = function(df, df_class, df_vol, c){
ss <- names(df_class)[2:ncol(df_class)]
for(i in 1:length(ss)){
s <- ss[i]
n <- sum(df$class == c & df$SubbasinID == s)
id_select <- df$id[which(df$class == c & df$SubbasinID == s)]
vol <- df_class[s]/n
df_vol[, names(df_vol) %in% id_select] <- vol
}
return(df_vol)
}
get_mean_volume = function(df, df_class, df_vol, c){
ss <- names(df_class)[2:ncol(df_class)]
for(i in 1:length(ss)){
s <- ss[i]
n <- sum(df$class == c & df$SubbasinID == s)
id_select <- df$id[which(df$class == c & df$SubbasinID == s)]
vol <- df_class[s]/n
df_vol[, names(df_vol) %in% id_select] <- vol
}
return(df_vol)
}
6
d
ddas
}
get_mean_volume = function(df, df_class, df_vol, c){
ss <- names(df_class)[2:ncol(df_class)]
for(i in 1:length(ss)){
s <- ss[i]
n <- sum(df$class == c & df$SubbasinID == s)
id_select <- df$id[which(df$class == c & df$SubbasinID == s)]
vol <- df_class[s]/n
df_vol[, names(df_vol) %in% id_select] <- vol
}
return(df_vol)
}
HDNR_vol <- get_mean_volume(HDNR_df, class1, HDNR_vol, 1)
HDNR_vol <- get_mean_volume(HDNR_df, class2, HDNR_vol, 2)
HDNR_vol <- get_mean_volume(HDNR_df, class3, HDNR_vol, 3)
HDNR_vol <- get_mean_volume(HDNR_df, class4, HDNR_vol, 4)
HDNR_vol <- get_mean_volume(HDNR_df, class5, HDNR_vol, 5)
save(HDNR_vol, file = "./Data/Downstreamness/HDNR_vol.Rdata")
HHDNR_vol <- apply(HDNR_vol, 1, sum)
HHDNR_vol <- apply(HDNR_vol[, 2:ncol(HDNR_vol)], 1, sum)
res_r_vol <- apply(real_df[, 2:ncol(HDNR_vol)], 1, sum)
res_r_vol <- apply(real_df[, 2:ncol(real_df)], 1, sum)
res_nH_vol <- apply(noH_df[, 2:ncol(noH_df)], 1, sum)
HDNR_vol <- apply(HDNR_vol[, 2:ncol(HDNR_vol)], 1, sum)
df <- data.frame(HDNR = HDNR_vol, C.Real = res_r_vol, C.noHDNR = res_nH_vol)
df <- reshape2::melt(df, id.vars = 'date', variable.name = 'Volumes')
df2 <- data.frame(date = Dsv_r$date, Real = Dsv_r$Dsv, noHDNR = Dsv_nH$Dsv)
df2 <- reshape2::melt(df2, id.vars = 'date', variable.name = 'Scenario')
df <- cbind(df2, df)
View(df)
df <- data.frame(HDNR = HDNR_vol, C.Real = res_r_vol, C.noHDNR = res_nH_vol)
df <- data.frame(date = Dsv_r$date, HDNR = HDNR_vol, C.Real = res_r_vol, C.noHDNR = res_nH_vol, vol = 1)
df <- reshape2::melt(df, id.vars = 'date', variable.name = 'Volumes')
df2 <- data.frame(date = Dsv_r$date, Real = Dsv_r$Dsv, noHDNR = Dsv_nH$Dsv)
df2 <- reshape2::melt(df2, id.vars = 'date', variable.name = 'Scenario')
df2 <- data.frame(date = Dsv_r$date, Real = Dsv_r$Dsv, noHDNR = Dsv_nH$Dsv, volume = 0)
df2 <- data.frame(date = Dsv_r$date, Real = Dsv_r$Dsv, noHDNR = Dsv_nH$Dsv, vol = 0)
df2 <- reshape2::melt(df2, id.vars = 'date', variable.name = 'Scenario')
df <- rbind(df2, df)
View(df)
CO2
df <- data.frame(date = Dsv_r$date, HDNR = HDNR_vol, C.Real = res_r_vol, C.noHDNR = res_nH_vol)
df <- reshape2::melt(df, id.vars = 'date', variable.name = 'Legend')
df2 <- data.frame(date = Dsv_r$date, Real = Dsv_r$Dsv, noHDNR = Dsv_nH$Dsv)
df2 <- reshape2::melt(df2, id.vars = 'date', variable.name = 'Legend')
df <- rbind(df2, df)
df$vol[df$Legend == 'HDNR'] <- 1
df$vol[df$Legend == 'C.Real'] <- 1
df$vol[df$Legend == 'C.noHDNR'] <- 1
View(df)
df$vol[is.na(df$vol)] <- 0
p <- df %>%
ggplot(aes(date, value)) +
geom_line(aes(linetype = Legend), size = 1.5, alpha = 0.5) +
facet_wrap(~vol)
print(p)
p <- df %>%
ggplot(aes(date, value)) +
geom_line(aes(linetype = Legend), size = 1.5, alpha = 0.5) +
facet_wrap(~vol, nrow = 2)
print(p)
# Example:
path <- "C:/Users/Utente/OneDrive - Politecnico di Milano/Backup PC/Uni/Thesis/Directory_thesis_codes"
setwd(path)
#Load the necessary data
load('./Inputs/Calibration/df_observations.RData')
load('./Inputs/Calibration/df_uncalibrated.RData')
load('./Data/Scenarios/Real/real_volumes.RData')
mod_df <- real_df
#Write the reservoir you want to plot
ID_plot <- 123
plot_calibration(mod_df, base_df, obs_df, ID_plot, paste0('End of calibration - ', ID_plot))
plot_calibration_static = function(it, base, obs, ID, code){
ID <- ID[which(ID %in% colnames(it))]
vis_df <- data.frame(it$date, it[, which(colnames(it) %in% ID)],
base[, which(colnames(base) %in% ID)],
obs[, which(colnames(obs) %in% ID)])
names(vis_df) <- c('date', "Calibrated", "Baseline"
, "Obervations")
df <- reshape2::melt(vis_df, id.vars = 'date', variable.name = 'Legend')
p <- ggplot(df, aes(date, value)) + geom_line(aes(linetype = Legend), alpha = 0.5, size = 1.2) +
xlab('Date') + ylab(expression('Monthly volume [m'^3*']'))
print(p)
}
plot_calibration_static(mod_df, base_df, obs_df, ID_plot, paste0('End of calibration - ', ID_plot))
plot_calibration_static = function(it, base, obs, ID, code){
ID <- ID[which(ID %in% colnames(it))]
vis_df <- data.frame(it$date, it[, which(colnames(it) %in% ID)],
base[, which(colnames(base) %in% ID)],
obs[, which(colnames(obs) %in% ID)])
names(vis_df) <- c('date', "Calibrated", "Baseline"
, "Obervations")
df <- reshape2::melt(vis_df, id.vars = 'date', variable.name = 'Legend')
p <- ggplot(df, aes(date, value)) +
geom_line(aes(linetype = Legend), alpha = 0.5, size = 1.2) +
xlab('Date') + ylab(expression('Monthly volume [m'^3*']')) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
scale_x_date(name = 'Date', date_breaks = "2 years", date_labels = '%Y')
print(p)
}
plot_calibration_static(mod_df, base_df, obs_df, ID_plot, paste0('End of calibration - ', ID_plot))
#Write the reservoir you want to plot
ID_plot <- 156
plot_calibration_static(mod_df, base_df, obs_df, ID_plot, paste0('End of calibration - ', ID_plot))
#From the saved df
load('./Inputs/Calibration/df_uncalibrated.RData')
#From the saved df
load('./Inputs/Calibration/df_observations.RData')
load('./Inputs/General/IDs.RData')
load('./Inputs/Calibration/df_observations.RData')
load('./Inputs/Calibration/df_uncalibrated.RData')
source("./Libraries/Libraries.R")
source("./Libraries/Functions.R")
source("./Libraries/Functions_TG.R")
source("./Libraries/Functions_DP.R")
source("./Libraries/Functions_CO.R")
source("./Libraries/Functions_MC.R")
#Load hydroGOF the hard way
files_sources = list.files("./Libraries/hydroGOF-master/R", full.names = T)
sapply(files_sources, source)
#Load the maximum capacities of the reservoirs
path_maxcap <- "C:/Thesis_fortran/Directory_WASA_Banabuiu/Input/Reservoir/reservoir.dat"
reservoirs <- read.table(path_maxcap, skip = 2, sep = "\t")
maxcap <- reservoirs[,c(1,5)]
names(maxcap) <- c('ID','max')
maxcap[,2] <- maxcap[,2]*1000 #m3
code <- 'final'
results <- WASA_calibration_evaluation(path, IDs, maxcap$max, obs_df,
code = code, complete = TRUE, start_obs = TRUE,
keep_mean = FALSE)
path <- './Data/Scenarios/Real/Model_output'
results <- WASA_calibration_evaluation(path, IDs, maxcap$max, obs_df,
code = code, complete = TRUE, start_obs = TRUE,
keep_mean = FALSE)
#Statistical indicators
plot_stat_calibration(results$complete, code)
View(results)
df <- data.frame(ID = results$complete$r2$ID,
r2 = results$complete$r2$result,
NSE = results$complete$NSE$unname.NSE_index.,
PBIAS = results$complete$PBIAS$PBIAS,
KGE = results$complete$KGE$unname.KGE_index.,
NRMSE = results$complete$NRMSE$NRMSE)
write.table(df, './Data/Plot_table/subb_performances.txt', quote = FALSE, row.names = FALSE)
round(df, 2)
round(df[, 2:ncol(df)], 2)
df[, 2:ncol(df)] <- round(df[, 2:ncol(df)], 2)
write.table(df, './Data/Plot_table/subb_performances.txt', quote = FALSE, row.names = FALSE)
