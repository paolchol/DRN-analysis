}
}
}
output<-list(g,m,nome)
output
}
dimmi_giorno(x,giorno_iniziale,mese_iniziale,n_giorno,bis)
x<-10
dimmi_giorno(x,giorno_iniziale,mese_iniziale,n_giorno,bis)
dimmi_giorno = function(x,g_in,m_in,n_giorno,bis){
conta = function(x,g_in){
gg<-c("LUN","MAR","MER","GIO","VEN","SAB","DOM")
for(i in 1:x){
if(g_in<7) g_in<-g_in+1 else  g_in<-1
}
out<-gg[g_in-1]
out
}
mese_31<-31
mese_28<-ifelse(bis,29,28)
mese_30<-30
v_mese<-c(mese_31,mese_28,mese_31,mese_30,mese_31,mese_30,mese_31,mese_31,mese_30,mese_31,mese_30,mese_31)
dif<-v_mese[m_in]-n_giorno+1
cond<-dif>=x
if(cond){
g<-n_giorno+x-1
m<-m_in
nome<-conta(x,g_in)
}else{
repeat{
m_in<-m_in+1
dif<-dif+v_mese[m_in]
cond<-dif>=x
if(cond){
g<-v_mese[m_in]-(dif-x)
m<-m_in
nome<-conta(x,g_in)
break
}
}
}
output<-list(g,m,nome)
output
}
x<-10
dimmi_giorno(x,giorno_iniziale,mese_iniziale,n_giorno,bis)
library(tictoc)
tic('prova')
x<-10
dimmi_giorno(x,giorno_iniziale,mese_iniziale,n_giorno,bis)
toc()
load("C:/Users/Utente/Dropbox/2020_07_09_RelazioneTerzoAnno/Analisi Macchinari/Centrale termica/Pompe/dataset_pompe.RData")
tic("Indice utilizzo - minuti")
plot(ind_utilizzo$minuti$perc,ind_utilizzo$minuti$consumo,type="l",col="darkblue",lwd=1.3,
main = "Indice di utilizzo - Pompe",xlab = "% tempo",ylab = "kW",yaxt="none")
axis(2,seq(0,round(max(ind_utilizzo$minuti$consumo,na.rm = TRUE)),2.5),las=2)
grid()
if(is.na(potenza_massima_W)==FALSE){
abline(h=potenza_massima_kW,col='firebrick3',lwd=1.75)
legend('topright','Potenza di targa',col='firebrick3',lwd=1.75,cex = 0.75)
}
if(is.na(soglia_spenta)){
abline(h=soglia_lavoro/1000,col='darkorange2',lty=2,lwd=1.75)
legend('right','Soglia di lavoro',col='red',lty=2,lwd=1.75,cex = 0.75)
}else{
abline(h=soglia_lavoro/1000,col='darkorange2',lty=2,lwd=1.75)
abline(h=soglia_spenta/1000,col='cadetblue4',lty=2,lwd=1.75)
legend('right',c('Soglia di lavoro','Soglia di standby'),lty = c(2,2),lwd = c(1.75,1.75),col = c('darkorange2','cadetblue4'),cex = 0.75)
}
toc()
#____________________________________
#1 - Importazione librerie
#Sezione da eseguire sempre la prima volta che si utilizza lo script
#o se si chiude e si riapre
library(tidyverse)
library(tictoc)
library(zoom)
#_______________________________________
#3 - Analisi dello stress della macchina
#3.1 - Conteggio del numero di partenze della macchina
#Sostituzione NA con valore del minuto precedente
pompe_senzaNA<-NA_val_prec(pompe_n[,2])
#Verifica dell'invarianza delle statistiche di base
mean(pompe_n[,2],na.rm = TRUE)-mean(pompe_senzaNA)
sd(pompe_n[,2],na.rm = TRUE)-sd(pompe_senzaNA)
#plot(pompe_senzaNA[1:1440],type = 'l',col="orange")
#plot(pompe_n[1:1440,2],type='l',col="green")
finestra_m<-2   #minuti tra un picco e l'altro
finestra_k<-240 #minuti precedenti al picco nei quali verificare la presenza di valori sotto soglia_spenta
c<-1            #numero di minuti tra un picco e l'altro per considerarli come partenze/passaggi diversi
tic("Calcolo numero medio picchi giornalieri - Media")
#Calcolo del numero medio di picchi giornalieri su tutta la serie annuale
n_part<-trova_part(pompe_senzaNA,finestra_m,finestra_k,c,soglia_lavoro,soglia_spenta)
n_part<-length(pulisci_part(n_part,pompe_senzaNA,finestra_m,finestra_k,soglia_lavoro,soglia_spenta))
n_part_g<-n_part/giorni_anno
if(is.na(soglia_spenta)==FALSE){
n_pass1<-trova_pass_stato(1,pompe_senzaNA,finestra_m,finestra_k,c,soglia_lavoro,soglia_spenta)
n_pass2<-trova_pass_stato(2,pompe_senzaNA,finestra_m,finestra_k,c,soglia_lavoro,soglia_spenta)
n_pass1<-length(pulisci_pass(n_pass1,pompe_senzaNA,finestra_m,finestra_k,c,soglia_lavoro,soglia_spenta))
n_pass2<-length(pulisci_pass(n_pass2,pompe_senzaNA,finestra_m,finestra_k,c,soglia_lavoro,soglia_spenta))
n_pass1_g<-n_pass1/giorni_anno
n_pass2_g<-n_pass2/giorni_anno
}
toc()
tic("Calcolo numero medio picchi giornalieri - GL e GNL")
#Calcolo del numero medio di picchi giornalieri diviso tra giorni lavorativi e non lavorativi
spart<-matrix(0,length(pompe_senzaNA)/(24*60),2)
if(is.na(soglia_spenta)==FALSE){
spass1<-matrix(0,length(pompe_senzaNA)/(24*60),2)
spass2<-matrix(0,length(pompe_senzaNA)/(24*60),2)
}
up<-1; giorno<-giorno_iniziale
for(i in 1:giorni_anno){
down<-up+(24*60-1)
vett<-pompe_senzaNA[up:down]
vpart<-trova_part(vett,finestra_m,finestra_k,c,soglia_lavoro,soglia_spenta)
spart[i,1]<-length(pulisci_part(vpart,vett,finestra_m,finestra_k,soglia_lavoro,soglia_spenta))
if(is.na(soglia_spenta)==FALSE){
vpass1<-trova_pass_stato(1,vett,finestra_m,finestra_k,c,soglia_lavoro,soglia_spenta)
vpass2<-trova_pass_stato(2,vett,finestra_m,finestra_k,c,soglia_lavoro,soglia_spenta)
spass1[i,1]<-length(pulisci_pass(vpass1,vett,finestra_m,finestra_k,c,soglia_lavoro,soglia_spenta))
spass2[i,1]<-length(pulisci_pass(vpass2,vett,finestra_m,finestra_k,c,soglia_lavoro,soglia_spenta))
}
if(giorno==6 || giorno==7){spart[i,2]<-1; if(is.na(soglia_spenta)==FALSE){spass1[i,2]<-1; spass2[i,2]<-1}}
giorno<-ifelse(giorno==7,1,giorno+1)
up<-down+1
}
spart[,2]<-ferie(spart[,2],vett_ferie)
if(is.na(soglia_spenta)==FALSE){
spass1[,2]<-ferie(spass1[,2],vett_ferie)
spass2[,2]<-ferie(spass2[,2],vett_ferie)
partpass<-cbind(spart[,1],spass1[,1],spass2[,1],spart[,2])
names(partpass)<-c('partenze','passaggi sp-st','passaggi st-l','GNL')
partpass<-as_tibble(partpass)
View(partpass)
remove(vpass1,vpass2)
}else{View(spart)}
remove(vett,vpart)
toc()
load("C:/Users/Utente/Dropbox/2020_07_09_RelazioneTerzoAnno/Analisi Macchinari/Centrale termica/Pompe/.RData")
#Sostituzione NA con valore del minuto precedente
pompe_senzaNA<-NA_val_prec(pompe_n[,2])
save.image("C:/Users/Utente/Dropbox/2020_07_09_RelazioneTerzoAnno/Analisi Macchinari/Centrale termica/Pompe/dataset_pompe.RData")
tic("Indice utilizzo - minuti")
plot(ind_utilizzo$minuti$perc,ind_utilizzo$minuti$consumo,type="l",col="darkblue",lwd=1.3,
main = "Indice di utilizzo - Pompe",xlab = "% tempo",ylab = "kW",yaxt="none")
axis(2,seq(0,round(max(ind_utilizzo$minuti$consumo,na.rm = TRUE)),2.5),las=2)
grid()
if(is.na(potenza_massima_W)==FALSE){
abline(h=potenza_massima_kW,col='firebrick3',lwd=1.75)
legend('topright','Potenza di targa',col='firebrick3',lwd=1.75,cex = 0.75)
}
if(is.na(soglia_spenta)){
abline(h=soglia_lavoro/1000,col='darkorange2',lty=2,lwd=1.75)
legend('right','Soglia di lavoro',col='red',lty=2,lwd=1.75,cex = 0.75)
}else{
abline(h=soglia_lavoro/1000,col='darkorange2',lty=2,lwd=1.75)
abline(h=soglia_spenta/1000,col='cadetblue4',lty=2,lwd=1.75)
legend('right',c('Soglia di lavoro','Soglia di standby'),lty = c(2,2),lwd = c(1.75,1.75),col = c('darkorange2','cadetblue4'),cex = 0.75)
}
toc()
View(dimmi_giorno)
dimmi_giorno = function(x,g_in,m_in,n_giorno,bis){
conta = function(x,g_in){
gg<-c("LUN","MAR","MER","GIO","VEN","SAB","DOM")
for(i in 1:x){
if(g_in<7) g_in<-g_in+1 else  g_in<-1
}
out<-gg[g_in-1]
out
}
mese_31<-31
mese_28<-ifelse(bis,29,28)
mese_30<-30
v_mese<-c(mese_31,mese_28,mese_31,mese_30,mese_31,mese_30,mese_31,mese_31,mese_30,mese_31,mese_30,mese_31)
dif<-v_mese[m_in]-n_giorno+1
cond<-dif>=x
if(cond){
g<-n_giorno+x-1
m<-m_in
nome<-conta(x,g_in)
}else{
repeat{
m_in<-m_in+1
m_in<-ifelse(m_in>12,1,m_in)
dif<-dif+v_mese[m_in]
cond<-dif>=x
if(cond){
g<-v_mese[m_in]-(dif-x)
m<-m_in
nome<-conta(x,g_in)
break
}
}
}
output<-list(g,m,nome)
output
}
x<-303
dimmi_giorno(x,giorno_iniziale,mese_iniziale,n_giorno,bis)
intervallo<-24*60
data_in<-"2020-01-28 00:00:00"
data_fin<-"2020-12-05 23:59:00"
c_troncato<-matrix(0,nrow = intervallo,ncol = 2)
ind_i<-(as.numeric(as.POSIXct(data_in,tz=""))-pompe_n[1,1])/60
ind_f<-(as.numeric(as.POSIXct(data_fin,tz=""))-pompe_n[1,1])/60
c_troncato[,1]<-pompe_n[ind_i:ind_f,1]
c_troncato[,2]<-pompe_n[ind_i:ind_f,2]
plot(c_troncato[,2],type="l",col="red",main = c(data_in, data_fin))
intervallo<-24*60
data_in<-"2020-01-28 00:00:00"
data_fin<-"2020-01-28 23:59:00"
c_troncato<-matrix(0,nrow = intervallo,ncol = 2)
ind_i<-(as.numeric(as.POSIXct(data_in,tz=""))-pompe_n[1,1])/60
ind_f<-(as.numeric(as.POSIXct(data_fin,tz=""))-pompe_n[1,1])/60
c_troncato[,1]<-pompe_n[ind_i:ind_f,1]
c_troncato[,2]<-pompe_n[ind_i:ind_f,2]
plot(c_troncato[,2],type="l",col="red",main = c(data_in, data_fin))
save.image("C:/Users/Utente/Dropbox/2020_07_09_RelazioneTerzoAnno/Analisi Macchinari/Centrale termica/Pompe/dataset_pompe.RData")
load("C:/Users/Utente/Dropbox/2020_07_09_RelazioneTerzoAnno/Analisi Macchinari/Centrale termica/Caldaie/dataset_caldaie.RData")
#Visualizzazione
if(is.na(soglia_spenta)){
plot(spart[,1],type='l',col='darkblue',
main='Partenze giornalierie - Compressori',xlab = "Giorni anno",ylab = "n")
}else{
plot(partpass[,1],type='l',col='darkblue',
main='Partenze e passaggi di stato giornalieri - Compressori',xlab = "Giorni anno",ylab = "n")
lines(partpass[,2],col='lightblue')
lines(partpass[,3],col='gold3')
legend('topright',c('Partenze','Passaggi spenta-standby','Passaggi standby-lavorazione'),
type='l',lwd = c(1.75,1.75),col=c('darkblue','lightblue','gold3'),cex=0.75)
}
View(partpass)
plot(partpass[,1])
plot(,partpass[,1])
plot(y=partpass[,1])
plot(spart[,1],type='l',col='darkblue',
main='Partenze giornalierie - Compressori',xlab = "Giorni anno",ylab = "n")
plot(partpass$V1)
plot(partpass$1)
partpass$partenze
plot(partpass$partenze)
plot(partpass$partenze,type='l',col='darkblue',
main='Partenze e passaggi di stato giornalieri - Compressori',xlab = "Giorni anno",ylab = "n")
#Visualizzazione
if(is.na(soglia_spenta)){
plot(spart[,1],type='l',col='darkblue',
main='Partenze giornalierie - Compressori',xlab = "Giorni anno",ylab = "n")
}else{
plot(partpass$partenze,type='l',col='darkblue',
main='Partenze e passaggi di stato giornalieri - Compressori',xlab = "Giorni anno",ylab = "n")
lines(partpass$`passaggi sp-st`,col='lightblue')
lines(partpass$`passaggi st-l`,col='gold3')
legend('topright',c('Partenze','Passaggi spenta-standby','Passaggi standby-lavorazione'),
type='l',lwd = c(1.75,1.75),col=c('darkblue','lightblue','gold3'),cex=0.75)
}
#Visualizzazione
if(is.na(soglia_spenta)){
plot(spart[,1],type='l',col='darkblue',
main='Partenze giornalierie - Compressori',xlab = "Giorni anno",ylab = "n")
}else{
plot(partpass$partenze,type='l',col='darkblue',
main='Partenze e passaggi di stato giornalieri - Compressori',xlab = "Giorni anno",ylab = "n")
lines(partpass$`passaggi sp-st`,col='lightblue')
lines(partpass$`passaggi st-l`,col='gold3')
legend('topright',c('Partenze','Passaggi spenta-standby','Passaggi standby-lavorazione'),
type='l',lwd = c(1.75,1.75),col=c('darkblue','lightblue','gold3'),cex=0.75)
}
legend('topleft',c('Partenze','Passaggi spenta-standby','Passaggi standby-lavorazione'),
type='l',lwd = c(1.75,1.75),col=c('darkblue','lightblue','gold3'),cex=0.75)
legend('topleft',c('Partenze','Passaggi spenta-standby','Passaggi standby-lavorazione'),
#type='l',
lwd = c(1.75,1.75),col=c('darkblue','lightblue','gold3'),cex=0.75)
install.packages("ismev")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
7
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron");
Sys.which("make")
## "C:\\rtools40\\usr\\bin\\make.exe"
install.packages("ismev")
library(tidyverse)
data()
BOD
?BOD
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand))
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand))+
geom_point()
ggplot(data = BOD,
mapping = aes(x = Time,
y = demand))+
geom_point(size = 5)+
geom_line(colour = "red")
#Simplyfying the code
ggplot(BOD, aes(Time, demand))+
geom_point()+
geom_line()
ggplot(BOD, aes(Time, demand))+
geom_point(size = 5)+
geom_line(colour = "red")
CO2
?CO2
names()
names(CO2)
CO2 %>%
ggplot(aes(conc,uptake,colour = Treatment))+
geom_point()
CO2 %>%
ggplot(aes(conc,uptake,colour = Treatment))+
geom_point(size = 3, alpha = 0.5)+ #alpha makes the points transparent
geom_smooth()
CO2 %>%
ggplot(aes(conc,uptake,colour = Treatment))+
geom_point(size = 3, alpha = 0.5)+ #alpha makes the points transparent
geom_smooth(method = lm, se = F)+
facet_wrap(~Type)
CO2 %>%
ggplot(aes(conc,uptake,colour = Treatment))+
geom_point(size = 3, alpha = 0.5)+ #alpha makes the points transparent
geom_smooth(method = lm, se = F)+
facet_wrap(~Type)+
labs(title = "Concentration of CO2")+
theme_bw()
CO2 %>%
ggplot(aes(Treatment,uptake))+
geom_boxplot()
CO2 %>%
ggplot(aes(Treatment,uptake))+
geom_boxplot()+
geom_point(aes(size = conc, colour = Plant))
CO2 %>%
ggplot(aes(Treatment,uptake))+
geom_boxplot()+
geom_point(alpha = 0.5, aes(size = conc, colour = Plant))
CO2 %>%
ggplot(aes(Treatment,uptake))+
geom_boxplot()+
geom_point(alpha = 0.5, aes(size = conc, colour = Plant))+
coord_flip()+
theme_bw()
CO2 %>%
ggplot(aes(Treatment,uptake))+
geom_boxplot()+
geom_point(alpha = 0.5, aes(size = conc, colour = Plant))+
facet_wrap(~Type)+
coord_flip()+
theme_bw()+
labs(title = "Chilled vs Non-Chilled")
mpg %>%
ggplot(aes(displ,cty))+
geom_point()
mpg %>%
ggplot(aes(displ,cty))+
geom_point(aes(colour = drv, size = trans))
geom_point(aes(colour = drv, size = trans),alpha = 0.5)
mpg %>%
ggplot(aes(displ,cty))+
geom_point(aes(colour = drv, size = trans),alpha = 0.5)
mpg %>%
ggplot(aes(displ,cty))+
geom_point(aes(colour = drv, size = trans),alpha = 0.5)+
geom_smooth(method = lm)
mpg %>%
ggplot(aes(displ,cty))+
geom_point(aes(colour = drv, size = trans),alpha = 0.5)+
geom_smooth()
mpg %>%
ggplot(aes(displ,cty))+
geom_point(aes(colour = drv, size = trans),alpha = 0.5)+
geom_smooth()+
facet_wrap(~year, nrow = 1)
mpg %>%
filter(cty<25)
mpg %>%
filter(cty<25) %>%
ggplot(aes(displ,cty))+
geom_point(aes(colour = drv, size = trans),alpha = 0.5)+
geom_smooth()+
facet_wrap(~year, nrow = 1)
mpg %>%
filter(cty<25) %>%
ggplot(aes(displ,cty))+
geom_point(aes(colour = drv, size = trans),alpha = 0.5)+
geom_smooth()+
facet_wrap(~year, nrow = 1)+
labs(x = "Engine size", y = "MPG in the city", title = "Fuel efficiency")+
theme_minimal()
mpg %>%
filter(cty<25) %>%
ggplot(aes(displ,cty))+
geom_point(aes(colour = drv, size = trans),alpha = 0.5)+
geom_smooth(method = lm)+
facet_wrap(~year, nrow = 1)+
labs(x = "Engine size", y = "MPG in the city", title = "Fuel efficiency")+
theme_minimal()
names(mpg)
mpg %>%
ggplot(aes(displ,cty))+
geom_line(colour = "red")
mpg %>%
ggplot(aes(displ,cty))+
geom_line(colour = "red")+
geom_lne(aes(fl,cty))
mpg %>%
ggplot(aes(displ,cty))+
geom_line(colour = "red")+
geom_line(aes(fl,cty))
View(mpg)
mpg %>%
ggplot(aes(displ,cty))+
geom_line(colour = "red")+
geom_line(aes(displ,hwy))
install.packages("devtools")
library(devtools)
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS=TRUE) #tell git_install() to ignore warnings. Otherwise, it gets stuck at each warning
install_github("tPilz/lumpR")
library(lumpR)
library(lumpR)
warnings()
?lumpR
?db_wasa_input
?make_wasa_input
path<-"C:/Users/Utente/OneDrive - Politecnico di Milano/Backup PC/Uni/Thesis/Analysis/time_series_generation"
Bana_prec_RMSE<-read.table(paste0(path,"/RMSE_prec.txt"), header = TRUE, sep = "\t")
View(Bana_prec_RMSE)
path<-"C:/Users/Utente/OneDrive - Politecnico di Milano/Backup PC/Uni/Thesis/Analysis/time_series_generation"
Bana_temp_RMSE<-read.table(paste0(path,"/RMSE_temp.txt"), header = TRUE, sep = "\t")
View(Bana_prec_RMSE)
View(Bana_temp_RMSE)
#Class ripartition
path<-"C:/Users/Utente/OneDrive - Politecnico di Milano/Backup PC/Uni/Thesis/Analysis/gen_files"
count_class<-read.table(paste0(path, "/lake_number_newHDRN_met2.dat"), skip = 2)
View(count_class)
for(i in 2:6){
print(paste0("Percentage of resevoirs in Class ",i-1))
print(paste0(round(sum(count_class[,i])/sum(count_class[,2:6]),digits = 3)*100," %"))
}
setwd("C:/Users/Utente/OneDrive - Politecnico di Milano/Backup PC/Uni/Thesis/Directory_thesis_codes")
source("./Libraries/Libraries.R")
DCA_real <- list.load("./Data/DCA/DCA_real2.RData")
DCA_noH <- list.load("./Data/DCA/DCA_noH2.RData")
DCA_obs <- list.load("./Data/DCA/DCA_obs2.RData")
df <- (date = DCA_real$Banabuiu$date, DCA_real$Banabuiu$quadrant noh = DCA_noH$Banabuiu$quadrant)
df <- (date = DCA_real$Banabuiu$date, DCA_real$Banabuiu$quadrant, noh = DCA_noH$Banabuiu$quadrant)
df <- data.frame(date = DCA_real$Banabuiu$date, DCA_real$Banabuiu$quadrant, noh = DCA_noH$Banabuiu$quadrant)
df <- data.frame(date = DCA_real$Banabuiu$date, real = DCA_real$Banabuiu$quadrant, noh = DCA_noH$Banabuiu$quadrant)
p <- ggplot(df, aes(x = date))+
geom_line(aes(x= date, y = real))
p <- ggplot(df, aes(x = date))+
geom_line(aes(x= date, y = real)) +
geom_line(aes(x= date, y=noh))
print(p)
plot(df$real)
plot(df$noh)
df <- data.frame(date = DCA_real$Banabuiu$date, real = DCA_real$Banabuiu$quadrant, noh = DCA_noH$Banabuiu$quadrant)
df <- reshape2::melt(df, id.vars = 'date', variable.name = 'Scenario')
p <- ggplot(df) +
geom_line(aes(date, value, colour = Scenario))
print(p)
DCA_real <- list.load("./Data/DCA/DCA_real.RData")
DCA_noH <- list.load("./Data/DCA/DCA_noH.RData")
DCA_obs <- list.load("./Data/DCA/DCA_obs.RData")
df <- data.frame(date = DCA_real$Banabuiu$date, real = DCA_real$Banabuiu$quadrant, noh = DCA_noH$Banabuiu$quadrant)
df <- reshape2::melt(df, id.vars = 'date', variable.name = 'Scenario')
p <- ggplot(df) +
geom_line(aes(date, value, colour = Scenario))
print(p)
table1 <- data.frame(matrix(NA, 5, 3))
names(table1) <- c("real", "noH", "obs")
for(i in 1:4){
table1$real[i] <- sum(DCA_real$Banabuiu$quadrant == i, na.rm = TRUE)
table1$noH[i] <- sum(DCA_noH$Banabuiu$quadrant == i, na.rm = TRUE)
table1$obs[i] <- sum(DCA_obs$Banabuiu$quadrant == i, na.rm = TRUE)
}
table1[5, ] <- apply(table1, 2, function(x) sum(x, na.rm = TRUE))
View(table1)
table2 <- table1/table1[5,1]
table2$obs <- table1$obs/table1[5,3]
View(table2)
#The observations have less actual months in drought phases both totally and relatively
#but the behavior is the same
table2$obs <- NULL
table2 <- round(table2, 2)
table2$real_tot <- table1$real
table2$noH_tot <- table1$noH
#Re-order the columns
table2 <- table2[, c(3,1,4,2)]
names(table2) <- c("real_tot", "real_perc", "noH_tot", "noH_perc")
#VD scatterplot
plot(DCA_noH$Banabuiu$WSI, DCA_real$Banabuiu$WSI)
plot(DCA_noH["123"]$WSI, DCA_real["123"]$WSI)
DCA_noH["123"]$WSI
DCA_noH["123"]
DCA_noH["123"]["WSI"]
plot(DCA_noH[["123"]]$WSI, DCA_real[["123"]]$WSI)
plot(DCA_noH[["156"]]$WSI, DCA_real[["156"]]$WSI)
df <- data.frame(date = DCA_real[['Banabuiu']]$date, Real = DCA_real[['156']]$WSI, noHDNR = DCA_noH[['156']]$WSI)
df <- reshape2::melt(df, id.vars = 'date', variable.name = 'Scenario')
date_ranges <- data.frame(
from = as.Date(c("1981-01-01", "1982-01-01", "1992-01-01", "1997-01-01", "2001-01-01", "2005-01-01", "2007-01-01", "2010-01-01")),
to = as.Date(c("1981-12-01", "1983-12-01", "1993-12-01", "1998-12-01", "2002-12-01", "2005-12-01", "2007-12-01", "2018-12-01"))
)
p <- ggplot() +
geom_line(data = df, aes(x = date, y = value, linetype = Scenario), alpha = 0.5, size = 1.25) +
geom_rect(data = date_ranges, aes(xmin = from, xmax = to, ymin = -Inf, ymax = Inf), alpha = 0.4) +
scale_y_continuous(name = 'Volume Deficit (VD)', limits = c(-1, 1)) +
scale_x_date(name = 'Date', date_breaks = "2 years", date_labels = '%Y', limits = as.Date(c("1980-01-01", "2018-12-01")), expand = c(0,0)) +
theme(axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12))
print(p)
